module STUN;

type MsgType = enum { REQ = 0x0001, IND = 0x0011, SUC = 0x0101, ERR = 0x0111};
type AttrType = enum { 
    MAPPED_ADDRESS = 0x0001,
    USERNAME = 0x0006,
    MESSAGE_INTEGRITY = 0x0008,
    ERROR_CODE = 0x0009,
    UNKNOWN_ATTRIBUTES = 0x000A,
    CHANNEL_NUMBER = 0x000C,
    LIFETIME = 0x000D,
    XOR_PEER_ADDRESS = 0x0012,
    DATA = 0x0013,
    REALM = 0x0014,
    NONCE = 0x0015,
    XOR_RELAYED_ADDRESS = 0x0016,
    REQUESTED_ADDRESS_FAMILY = 0x0017,
    EVEN_PORT = 0x0018,
    REQUESTED_TRANSPORT = 0x0019,
    DONT_FRAGMENT = 0x001A,
    ACCESS_TOKEN = 0x001B,
    MESSAGE_INTEGRITY_SHA256 = 0x001C,
    PASSWORD_ALGORITHM = 0x001D,
    USERHASH = 0x001E,
    XOR_MAPPED_ADDRESS = 0x0020,
    RESERVATION_TOKEN = 0x0022,
    PRIORITY = 0x0024,
    USE_CANDIDATE = 0x0025,
    PADDING = 0x0026,
    RESPONSE_PORT = 0x0027,
    CONNECTION_ID = 0x002A,
    ADDITIONAL_ADDRESS_FAMILY = 0x8000,
    ADDRESS_ERROR_CODE = 0x8001,
    PASSWORD_ALGORITHMS = 0x8002,
    ALTERNATE_DOMAIN = 0x8003,
    ICMP = 0x8004,
    SOFTWARE = 0x8022,
    ALTERNATE_SERVER = 0x8023,
    TRANSACTION_TRANSMIT_COUNTER = 0x8025,
    CACHE_TIMEOUT = 0x8027,
    FINGERPRINT = 0x8028,
    ICE_CONTROLLED = 0x8029,
    ICE_CONTROLLING = 0x802A,
    RESPONSE_ORIGIN = 0x802B,
    OTHER_ADDRESS = 0x802C,
    ECN_CHECK = 0x802D,
    THIRD_PARTY_AUTHORIZATION = 0x802E,
    MOBILITY_TICKET = 0x8030,
    CISCO_STUN_FLOWDATA = 0xC000,
    ENF_FLOW_DESCRIPTION = 0xC001,
    ENF_NETWORK_STATUS = 0xC002,
    GOOG_MISC_INFO = 0xC059,
    GOOG_MESSAGE_INTEGRITY_32 = 0xC05A
    };


const VALID_COOKIE = 0x2112a442;

public type Stun = unit {
    msg_type: uint16 &convert=MsgType($$);
    msg_length: uint16 {self.remainder = $$;}
    cookie: uint32;
    trans_id: bytes &size=12;
    attributes: Attribute[]; 


    on %done {
	print "Type: %" % self.msg_type;
	print "Length: %" % self.msg_length;
	print "Cookie: %" % self.cookie;
	print "Transaction id: %" % self.trans_id;
	print "Attributes:";
	for (attr in self.attributes) {
	    print(attr);
	}

    }

    var remainder: uint16;

};

type Attribute = unit {
    attr_type: uint16 &convert=AttrType($$);
    attr_length: uint16 {
	self.value_padding = padding($$);
	self.total_size = $$ + self.value_padding;
	}
    attr_value: bytes &size=self.total_size;

    var value_padding: uint16;
    var total_size: uint16;
};

function padding(x: uint16): uint16 {
    if (x % 4 > 0) {
	return 4 - (x % 4);
    } else {
	return 0;
    }
}

